{"version":3,"sources":["components/header/index.js","server.js","components/content/index.js","components/articleList/index.js","pages/home/index.js","pages/essays/index.js","pages/details/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","react_router_dom","to","href","Component","http","post","get","serverUrl","formatUri","url","uri","indexOf","data","Promise","resolve","reject","axios","params","then","res","options","arguments","length","undefined","Content","state","typeList","_this2","this","code","setState","message","error","map","item","index","key","remark","name","ArticleList","list","categoryId","forEach","dataAdd","moment","format","concat","id","title","HomePage","components_header","components_content","Essays","components_articleList","Details","details","props","match","dangerouslySetInnerHTML","__html","content","App","react_router","exact","path","render","component","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fdcd8d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.css'\n\nclass Header extends Component {\n  render() {\n    return(\n      <div className='header'>\n        <Link to='/'><span>monster.com</span></Link><a href='https://github.com/Monsterthirteen/blog'><b> (</b><i> src </i><b>) </b></a>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import axios from 'axios';\n\nlet http = {\n  post: \"\",\n  get: \"\"\n}\n\nconst serverUrl = 'https://api.it120.cc/monsterthirteen/';\n\nfunction formatUri(url) {\n  let uri = ''\n  uri = process.env.NODE_ENV === 'production' ? '../' + url: './' + url\n  if (url.indexOf('http') > -1) uri = url\n  return uri\n} \n\nhttp.get = ( url, data) => {\n  return new Promise((resolve, reject) => {\n    axios.get(formatUri(serverUrl + url),{\n      params: data\n    })\n    .then(res=>{\n      resolve(res.data)\n    })\n  })\n}\n\nhttp.post = ( url, data, options = {}) => {\n  return new Promise((resolve, reject) => {\n    axios.post(formatUri(serverUrl + url), data, options)\n    .then(res=>{\n      resolve(res.data)\n    })\n  })\n}\n\nexport default http;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport http from '../../server';\nimport { message } from 'antd';\nimport './index.css';\n\nclass Content extends Component { \n\n  state = {\n    typeList:[]\n  }\n\n  componentWillMount() {\n    http.get('cms/category/list')\n    .then(res => {\n      if(res.code !== 0){\n        message.error(res.message)\n        return\n      }\n      this.setState({\n        typeList: res.data\n      });\n    });\n  }\n\n  render(){\n    const { typeList } = this.state;\n\n    return(\n      <div className='homeContent'>\n        <h1 className='contentTitle'>Live Long and Code</h1>\n        <ul className='typeContainer'>\n          {\n            typeList.map((item,index) => (\n              <li className='typeList' key={ index }><a href={ item.remark }>{ item.name }</a></li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nContent.propTypes = {\n  typeList: PropTypes.array\n}\n\n\nexport default Content;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport http from '../../server';\nimport { message } from 'antd';\nimport moment from 'moment';\nimport './index.css'\n\nclass ArticleList extends Component {\n\n  state = {\n    list: []\n  }\n\n  componentWillMount() {\n    http.get('cms/news/list',{\n      categoryId: 0\n    })\n    .then(res => {\n      if(res.code !== 0) {\n        message.error(res.message)\n        return\n      }\n      const data = res.data\n      data.forEach(item => {\n        item.dataAdd = moment(item.dataAdd).format('ll')\n      })\n      this.setState({\n        list: data\n      });\n    });\n  }\n\n  render() {\n\n    const { list } = this.state;\n\n    return(\n      <div className='listContainer'>\n        <ul>\n          {\n            list.map((item,index) => (\n              <li key={ index }>\n                <span>{ item.dataAdd }</span>\n                <Link to={`/details/${item.id}`}>{ item.title }</Link>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nArticleList.propTypes = { \n  list:PropTypes.array\n}\n\nexport default ArticleList;","import React, { Component } from 'react';\nimport { Header, Content } from '../../components';\n\nclass HomePage extends Component {\n  render() {\n    return(\n      <div className='pageContainer'>\n        <Header/>\n        <Content/>\n      </div>\n    )\n  }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\nimport { Header, ArticleList } from '../../components';\n\nclass Essays extends Component {\n  render() {\n    return(\n      <div className='pageContainer'>\n        <Header/>\n        <ArticleList/>\n      </div>\n    )\n  }\n}\n\nexport default Essays;","import React, { Component } from 'react';\nimport http from '../../server';\nimport { Header } from '../../components';\nimport { message } from 'antd';\nimport moment from 'moment';\nimport './index.css';\n\nclass Details extends Component {\n\n  state = {\n    details: {}\n  }\n\n  componentWillMount() {\n    http.get('cms/news/detail',{\n      id: this.props.match.params.id\n    })\n    .then(res => {\n      if(res.code !== 0){\n        message.error(res.message)\n        return\n      }\n      res.data.dataAdd = moment(res.data.dataAdd).format('ll')\n      this.setState({\n        details: res.data\n      });\n    });\n  }\n\n  render(){\n    const { details } = this.state;\n    return(\n      <div className='pageContainer'>\n        <Header/>\n        <div className='article'>\n          <h1>{details.title}</h1>\n          <p>{details.dataAdd}</p>\n          <div dangerouslySetInnerHTML={{__html: details.content}}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Details;","import React, { Component } from 'react';\nimport { HomePage, Essays, Details } from './pages';\nimport { Route, BrowserRouter as Router, Redirect} from 'react-router-dom';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route exact path=\"/\" render = {() => <Redirect to=\"/home\" />}/>\n          <Route path='/home' component={HomePage}/>\n          <Route path='/essays' component={Essays}/>\n          <Route path='/details/:id' component={Details}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}